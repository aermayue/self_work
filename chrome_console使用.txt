chrome控制台

Initiator解释请求是怎么发起的，有四种可能的值：

Parser：请求是由页面的HTML解析时发送的；
Redirect：请求是由页面重定向发送的；
Script：请求是由script脚本处理发送的；
Other：请求是由其他过程发送的，比如页面里的link链接点击，在地址栏输入URL地址。


Disable cache: 不允许缓存的话，所有资源均重新加载。

Event Listeners: 显示当前HTML DOM节点和其祖先节点的所有JavaScript事件监听器，这里的监听脚本可以来自Chrome的插件。可以点击右边小漏斗形状(filter)选择只显示当前节点的事件监听器。

事件监听


console.assert对输入的表达式进行断言，只有表达式为false时，才输出相应的信息到控制台
var isDebug=false;
console.assert(isDebug,'为false时输出的log信息。。。');

var isDebug=true;
console.assert(isDebug,'为false时输出的log信息。。。');

console.count（这个方法非常实用哦）当你想统计代码被执行的次数

function myFun(){
	//其他函数逻辑
	console.count('myFun 被执行的次数：');
}
myFun();
myFun();
myFun();


console.dir()

function lookEvents (elem) {
    return $.data ? $.data( elem, "events", undefined, true ) : $._data( elem, "events" );
}
var event = lookEvents($("#plist")[0]); // 获取绑定的事件
event.click[0].handler