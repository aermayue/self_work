php的pack与unpack

ASCII，Unicode和UTF-8（参考：http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html）
1、ASCII码，计算机内部，所有信息最终都表示为一个二进制的字符串，每一个二进制位（bit）有0和1两种状态，因此八个二进制位就可以组合出256种状态，这被称为一个字节（byte）。
也就是说，一个字节一共可以用来表示256种不同的状态，每一个状态对应一个符号，就是256个符号，从0000000到11111111。
ASCII，字符编码，对英语字符与二进制位之间的关系，一共规定了128个字符编码这128个符号（包括32个不能打印出来的控制符号），
只占用了一个字节的后面7位，最前面的1位统一规定为0。
2、非ASCII码，英语用128个符号编码就够了，但是用来表示其他语言，128个符号是不够，
比如，简体中文常见的编码方式是GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示256x256=65536个符号
3、Unicode，Unicode只是一个符号集，它只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储。
4、UTF-8，互联网的普及，强烈要求出现一种统一的编码方式。UTF-8就是在互联网上使用最广的一种Unicode的实现方式
UTF-8最大的一个特点，就是它是一种变长的编码方式。它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度
5、Little endian和Big endian
Unicode码可以采用UCS-2格式直接存储。以汉字"严"为例，Unicode码是4E25，需要用两个字节存储，一个字节是4E，另一个字节是25。
存储的时候，4E在前，25在后，就是Big endian方式；25在前，4E在后，就是Little endian方式。
因此，第一个字节在前，就是"大头方式"（Big endian），第二个字节在前就是"小头方式"（Little endian）。
6、计算机怎么知道某一个文件到底采用哪一种方式编码？
如果一个文本文件的头两个字节是FE FF，就表示该文件采用大头方式；如果头两个字节是FF FE，就表示该文件采用小头方式。
Unicode编码中表示字节排列顺序的那个文件头，叫做BOM（byte-order mark），FFFE和FEFF就是不同的BOM。
UTF-8文件的BOM是“EF BB BF”，但是UTF-8的字节顺序是不变的，因此这个文件头实际上不起作用。有一些编程语言是ISO-8859-1编码，
所以如果用UTF-8针对这些语言编程序，就必须去掉BOM，即保存成“UTF-8—无BOM”的格式才可以，PHP语言就是这样。

7、PHP实现Unicode和Utf-8编码的互相转换（https://segmentfault.com/a/1190000003020776）


UTF-8编码表是怎么来的？

http://blog.csdn.net/tge7618291/article/details/7599902 （位移与换算）


pack与unpack
http://my.oschina.net/goal/blog/195749#OSC_h3_11
http://my.oschina.net/goal/blog/202378?p=1&temp=1470637365854#blog-comments-list

ISO 8859-1又称 Latin-1 或西欧语言
因为ISO-8859-1编码范围使用了单字节内的所有空间，在支持ISO-8859-1的系统中传输和存储其他任何编码的字节流都不会被抛弃。
换言之，把其他任何编码的字节流当作ISO-8859-1编码看待都没有问题。这是个很重要的特性，MySQL数据库默认编码是Latin-1就是利用了这个特性。ASCII编码是一个7位的容器，ISO-8859-1编码是一个8位的容器